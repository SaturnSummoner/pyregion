========
Overview
========

pyregion is a python module to parse ds9 region files. It also support
ciao region files. 

Please note that my main emphasis is to read in the regions files
generated by ds9 itself. It reads most of the region files created by
ds9. However, it may fail to read some of the user-created (or created
by other programs) region files, even if they can be successfully read
by ds9. Ruler, Compass and Projection type is ignored.


+----------------------------------------+----------------------------------------+
| ds9                                    | pyregion                               |
+========================================+========================================+
| .. image:: ../_static/region_ds9.jpg   | .. image:: ../_static/region_mpl.png   |
|   :width: 300px                        |   :width: 300px                        |
|   :target: ../static/region_ds9.jpg    |   :target: ../static/region_mpl.png    |
+----------------------------------------+----------------------------------------+


.. contents::
   :depth: 1
   :local:


Read Region Files
=================

*pyregion.read_region* takes the region string as an argument and
returns list of shape objects. ::

    from pyregion import read_region
    region_name = "ds9.reg"
    region_string = open(region_name).read()
    r = read_region(region_string)

The shape object is a python representation of each region
definition. For example,::

    from pyregion import read_region
    
    region_string = """
    # Region file format: DS9 version 4.1
    # Filename: test01.fits
    global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
    fk5
    circle(11:24:24.230,-59:15:02.20,18.5108") # color=cyan background
    box(11:24:39.213,-59:16:53.91,42.804",23.616",19.0384) # width=4
    """

    r = read_region(region_string)

And you have::

    >>> print r[0]
    Shape : circle ( HMS(11:24:24.230),DMS(-59:15:02.20),Ang(18.5108") )
    >>> print r[1]
    Shape : box ( HMS(11:24:39.213),DMS(-59:16:53.91),Ang(42.804"),Ang(23.616"),Number(19.0384) )

The shape object has following attributes,

* name : name of the shape. e.g., circle, box, etc.. ::

   >>> print r[0].name
   circle

* coord_format : coordinates format. e.g., "fk5", "image", "physical", etc... ::

   >>> print r[0].coord_format
   fk5
   
* coord_list : list of coordinates as the specified coordinate
  format. The coordinate value for sky coordinate is degree.  ::

   >>> print r[0].coord_list
   [171.10095833333332, -59.250611111111112, 0.0051418888888888886]

* comment : comment string associated with the shape (can be None) ::

   >>> print r[0].comment
   color=cyan background

* attr : attributes of the shape. This includes global attributes
  defined by the global command. The first item is a list of
  attributes with out associated values (e.g., background..) and the
  second item is a dictionary of attributes. ::

    >>> print r[0].attr[0]
    ['background']
    >>> print r[0].attr[1]
    {'color': 'cyan',
     'dash': '0 ',
     'dashlist': '8 3 ',
     'delete': '1 ',
     'edit': '1 ',
     'fixed': '0 ',
     'font': '"helvetica 10 normal"',
     'highlite': '1 ',
     'include': '1 ',
     'move': '1 ',
     'select': '1 ',
     'source': '1',
     'width': '1 '}





pyregion.read_region_as_imagecoord converts the coordinate into the
image coordinate ("1"-based). And the function requires the
Pyfits.Header instance as the second parameter.::

    import pyfits
    f = pyfits.open("t1.fits")
    r2 = read_region_as_imagecoord(region_string, header=f[0].header)

The return value is similar to read_region, but the coordinate is in
the image coordinate. ::

    >>> print r2[0].coord_format
    image

    >>> print r2[0].coord_list
    [482.27721401429852, 472.76641383805912, 18.811792596807045]



Draw Regions with Matplotlib
============================

pyregion provides a helper function to draw regions with matplotlib. ::

    from pyregion.mpl_helper import as_mpl_artists
    patch_list, artist_list = as_mpl_artists(r2)

The argument for *as_mpl_artists* needs to be the return list of the
read_region_as_imagecoord call, i.e., coordinate needs to be in image
coordinate. *as_mpl_artists* returns two list of mpl Artist class. The
first item is a list of mpl's Patches, and the second is other kind of
artists. The return values need to be added to the axes manually::

    # ax is a mpl Axes object
    for p in patch_list:
        ax.add_patch(p)
    for t in artist_list:
        ax.add_artist(t)

The (optional) second argument of as_mpl_artists is a function that
takes the shape object as and argument and returns a dictionary object
that will be used as a keyword arguments (e.g., colors and line width)
for creating the mpl artists. By default, it uses
pyregion.mpl_helper.properties_func_default, which try to respect the
ds9 attributes.

.. plot:: figures/test_region_drawing.py

