# Do not edit this file. This file is automatically
# generated by geneate_test_script.py

import pyregion
from pyregion.wcs_helper import fix_lon

import unittest

try:
    from astropy.io import fits as pyfits
except ImportError:
    import pyfits

import numpy as np

# At some point, pyfits.Card.fromstring has changed from unbound
# method to bounded method.

if pyfits.Card.fromstring.__self__: #
    def pyfits_card_fromstring(l):
        return pyfits.Card.fromstring(l)
else:
    def pyfits_card_fromstring(l):
        c = pyfits.Card()
        return c.fromstring(l)

rootdir = "docs/pyregion/examples"

header_str = '''SIMPLE  =                    T / file does conform to FITS standard
BITPIX  =                   16 / number of bits per data pixel
NAXIS   =                    2 / number of data axes
NAXIS1  =                 1629 / length of data axis
NAXIS2  =                 1653 / length of data axis
EXTEND  =                    T / FITS dataset may contain extensions
EQUINOX =  2.0000000000000E+03 / default
CTYPE1  = 'RA---TAN'
CRVAL1  =  1.7114680010248E+02
CRPIX1  =  7.9250000000000E+02
CDELT1  = -1.3666666666667E-04
CUNIT1  = 'deg     '
CTYPE2  = 'DEC--TAN'
CRVAL2  = -5.9266678641361E+01
CRPIX2  =  8.2750000000000E+02
CDELT2  =  1.3666666666667E-04
CUNIT2  = 'deg     '
CTYPE1P = 'X       '           / sky coordinates
CRVAL1P =  3.3045000000000E+03
CRPIX1P =  5.0000000000000E-01
CDELT1P =  1.0000000000000E+00
WCSTY1P = 'PHYSICAL'
LTV1    = -3.3040000000000E+03
LTM1_1  =  1.0000000000000E+00
CTYPE2P = 'Y       '           / sky coordinates
CRVAL2P =  3.2695000000000E+03
CRPIX2P =  5.0000000000000E-01
CDELT2P =  1.0000000000000E+00
WCSTY2P = 'PHYSICAL'
LTV2    = -3.2690000000000E+03
LTM2_2  =  1.0000000000000E+00

'''

def demo_header():
    cards = pyfits.CardList()
    for l in header_str.split("\n"):
        card = pyfits_card_fromstring(l.strip())
        cards.append(card)
    h = pyfits.Header(cards)
    return h


class TestRegion(unittest.TestCase):
    ref_region_name = "test01_img.reg"

    region_list = ["test01_fk5_sexagecimal.reg",
                   "test01_gal.reg",
                   "test01_ds9_physical.reg",
                   "test01_fk5_degree.reg",
                   "test01_mixed.reg",
                   "test01_ciao.reg",
                   "test01_ciao_physical.reg",
                   ]

    ref_region_str = """# Region file format: DS9 version 4.1
# Filename: test01.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
image
-ellipse(750,853,46,21,317.01716) # width=3 background
circle(964,945,37.6236) # color=cyan
box(730.5,718,87,48,19.038396) # width=4
polygon(878.11234,811.88766,1003,861,973,688,878.11234,752.11234)

    """
    def setUp(self):
        self.header = demo_header()
        self.ref_region = pyregion.parse(self.ref_region_str).as_imagecoord(self.header)


    def test_fk5_sexagecimal(self):
        region_str = '''# Region file format: DS9 version 4.1
# Filename: test01.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
fk5
-ellipse(11:24:37.960,-59:15:47.50,22.632",10.332",317.017) # width=3 background
circle(11:24:24.230,-59:15:02.20,18.5108") # color=cyan
box(11:24:39.213,-59:16:53.91,42.804",23.616",19.0384) # width=4
polygon(11:24:29.737,-59:16:07.72,11:24:21.723,-59:15:43.52,11:24:23.641,-59:17:08.64,11:24:29.736,-59:16:37.13)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_gal(self):
        region_str = '''# Region file format: DS9 version 4.1
# Filename: test01.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
galactic
-ellipse(+292:01:59.027,+01:45:33.389,22.632",10.332",297.784) # width=3 background
circle(+292:00:04.651,+01:45:41.444,18.5108") # color=cyan
box(+292:02:29.979,+01:44:33.837,42.804",23.616",359.806) # width=4
polygon(+292:01:06.152,+01:44:53.528,+292:00:00.146,+01:44:56.102,+292:00:42.141,+01:43:40.599,+292:01:15.844,+01:44:25.760)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_ds9_physical(self):
        region_str = '''# Region file format: DS9 version 4.1
# Filename: t1.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
physical
-ellipse(4053.9922,4121.9905,46,21,317.017)
circle(4267.9987,4214.0083,37.623659)
box(4034.5013,3987.0067,87,48,19.0384)
polygon(4182.1103,4080.8819,4307.0067,4129.9947,4276.9938,3957.01,4182.1053,4021.1054)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_fk5_degree(self):
        region_str = '''# Region file format: DS9 version 4.1
# Filename: test01.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
fk5
-ellipse(171.15816,-59.263193,22.632",10.332",317.01716) # width=3 background
circle(171.10096,-59.250612,18.510811") # color=cyan
box(171.16339,-59.281643,42.804",23.616",19.038396) # width=4
polygon(171.1239,-59.26881,171.09051,-59.262088,171.0985,-59.285735,171.1239,-59.27698)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_mixed(self):
        region_str = '''# Region file format: DS9 version 4.1
# Filename: test01.fits
global color=green dashlist=8 3 width=1 font="helvetica 10 normal" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
fk5
-ellipse(171.15816,-59.263193,22.632",10.332",317.01716) # width=3 background
galactic
circle(+292:00:04.651,+01:45:41.444,18.5108") # color=cyan
image
box(730.5,718,87,48,19.038396) # width=4
galactic
polygon(+292:01:06.152,+01:44:53.528,+292:00:00.146,+01:44:56.102,+292:00:42.141,+01:43:40.599,+292:01:15.844,+01:44:25.760)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_ciao(self):
        region_str = '''# Region file format: CIAO version 1.0
-ellipse(11:24:37.960,-59:15:47.50,0.3772',0.1722',317.017)
circle(11:24:24.230,-59:15:02.20,0.308514')
rotbox(11:24:39.213,-59:16:53.91,0.7134',0.3936',19.0384)
polygon(11:24:29.737,-59:16:07.72,11:24:21.723,-59:15:43.52,11:24:23.641,-59:17:08.64,11:24:29.736,-59:16:37.13)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude


    def test_ciao_physical(self):
        region_str = '''# Region file format: CIAO version 1.0
-ellipse(4053.9922,4121.9905,46,21,317.017)
circle(4267.9987,4214.0083,37.623659)
rotbox(4034.5013,3987.0067,87,48,19.0384)
polygon(4182.1103,4080.8819,4307.0067,4129.9947,4276.9938,3957.01,4182.1053,4021.1054)

        '''
        r = pyregion.parse(region_str).as_imagecoord(self.header)
        for reg0, reg in zip(self.ref_region, r):
            if reg.name == "rotbox":
                reg.name = "box"

            assert reg0.name == reg.name
            if reg0.name in ["ellipse", "box"]:
                assert np.allclose(reg0.coord_list[:-1], reg.coord_list[:-1],
                                   atol=0.01)
                a0 = reg0.coord_list[-1]
                a1 = fix_lon(reg.coord_list[-1], 0)
                assert np.allclose([a0], [a1], atol=0.02)
            else:
                assert np.allclose(reg0.coord_list, reg.coord_list,
                                   atol=0.01)
            assert reg0.exclude == reg.exclude

